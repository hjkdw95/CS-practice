// 프로그래머스  - 짝지어 제거하기 lv3
// 이문제는 for문을 돌려서도 정확성 테스트는 다 맞췄으나, 효율성 테스트시 점수를 못받는다
// 효율성 테스트 시 for를 사용하면 일일이 탐색을 하게되기 때문에..들어오는 문자가 길면 길수록 탐색 시간이 길어져서 비효율 적이다
// 그런 이유로..for로 했다가 stack을 사용하는 쪽으로 관점을 돌렸다

// Tip ) 결국 문제에 답이 다 있다. 예제를 풀어나가는 프로세스를 보면 겹칠때마다 사라지게 하라는 거기 때문에 stack 배열을 따로 만들어 준 후, 우선 값을 집어넣고, 그 뒤에 똑같은 값이 추출되면 pop으로 날려주는 식으로 구현했다.
// stack은 항상 비워져야되는 원리이기에 해당 문제에 적합했다.
// stack을 앞에서 뽑아내는 방법과 뒤에서 뽑아내는 방법이 있는데 이 경우는 뒤에서 뽑아주는 방법(pop)을 사용했다

function solution(s) {
  let arr = s.split("");
  // 길이가 홀수 일 때
  // 홀수일 때는 짝짝이 있어도 무조건 하나가 남기 마련이기에 고민없이 0을 반환해준다
  if (arr.length % 2 === 1) return 0;

  // 길이가 짝수 일 때 - stack 사용
  let stack = [];
  for (let i = 0; i < arr.length; i++) {
    // stack이 비어있다거나, stack의 끝자리가 지금 들어오는 값과 다른 경우 stack 을 채워준다
    if (stack.length === 0 || stack[stack.length - 1] !== arr[i]) {
      stack.push(arr[i]);
      // 이 외의 경우 (즉 stack의 끝자리와 이번에 반환한 값이 같은 경우) pop을 사용하여 stack을 비워준다
    } else {
      stack.pop();
    }
  }
  // 쌍으로 값이 이쁘게 들어있는 경우 stack은 비워져있을 것이고, 쌍으로 값이 없는 경우는 stack에 해결되지 않은 채 남아있는다
  return stack.length > 0 ? 0 : 1;
}
